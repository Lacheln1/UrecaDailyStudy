.cartList {
  border: 1px solid red;
  /* 나중에 반응형을 위해,  이게 꼭 정답은 아님*/
  display: flex;
  flex-direction: column;
  gap: var(--fs12);
  /*  */
}

.cartItem {
  border: 1px solid blue;
  margin-bottom: var(--fs12);
  /* 옆으로 나열 */
  display: flex;
  /* 안의 div요소들 수직 중앙 정렬 */
  align-items: center;
  justify-content: space-between;
  gap: var(--fs12);
  border-radius: var(--fs12);
  padding: var(--fs12);
}

.cartItem > div {
  border: 1px solid green;
}

.cartImg {
  border-radius: var(--fs12);
  overflow: hidden;
  width: 100px;
}

.cartImg img {
  width: 100%;
  height: 100%;
  /* 부모의 사이즈에 맞게 꽉 채워지게 하기 위해 100 100주고 object-fit 필수 */
  object-fit: cover;
}

.title {
  flex: 1;
}

.price,
.sum {
  width: 110px;
  text-align: right;
}
.btnArea {
  background-color: #dcdbdb;
  border-radius: var(--fs8);
}

.btnArea button {
  border: none;
  outline: none;
  padding: var(--fs12) var(--fs20);
  font-size: var(--fs16);
  background-color: transparent;
}

.btnArea span {
  /* span태그 고정 */
  display: inline-block;
  width: 50px;
}

img {
  width: 100px;
}

.deleteBtn {
  padding: var(--fs12);
}

@media (max-width: 900px) {
  .cartItem {
    display: grid;
    /* grid 몇단을 만드는지에 대한 속성 50px은 버튼이 들어갈 정도 */
    grid-template-columns: 1fr 1fr 50px;
    /* 행 */
    grid-template-rows: repeat(4, 1fr);
  }

  .cartImg {
    grid-column: 1/2;
    grid-row: 1/5;
    width: 100%;
    height: 100%;
  }

  /* title,price,sum은 한줄씩 보이게 하고싶다 */
  .title,
  .price,
  .sum {
    grid-column: 2/4;
  }

  /* order : 구조를 두고 몇번째로 구성하겠다  html 태그 */
  .btnArea {
    order: 1;
  }

  .deleteBtn {
    order: 5;
  }
}

@media (max-width: 500px) {
  .cartItem {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  .cartItem > div {
    width: 100%;
  }
  /* 삭제버튼을 수량 버튼 옆으로 보내기 위한 작업 */
  .cartItem > .btnArea {
    width: calc(100%-80px);
  }

  .cartItem > .deleteBtn {
    width: 50px;
  }
}
